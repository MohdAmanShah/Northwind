@rendermode RenderMode.InteractiveServer
@page "/customer/{country?}"
@attribute [StreamRendering(true)]
@inject INorthwindService _service
@inject NavigationManager _nav

<PageTitle>Customer - @(String.IsNullOrWhiteSpace(Country) ? "Worldwide" : Country)</PageTitle>
<h3>
    Customer @(String.IsNullOrWhiteSpace(Country) ? "Worldwide" : "in " + Country)
</h3>

<div class="form-group">
    <form @onsubmit=Action>
        <div class="input-group">
            <input type="text" @bind-value=@Country placeholder="Enter country" />
            <button class="btn btn-primary" @onclick=Action>Search</button>
        </div>
    </form>
</div>

<div class="form-group">
    <a class="btn btn-info" href="createcustomer">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
            <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
        </svg> Create New
    </a>
</div>

@if (customers is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Company Name</th>
                <th>Address</th>
                <th>Phone</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (EntityModels.Customer c in customers)
            {
                <tr>
                    <td>@c.CustomerId</td>
                    <td>@c.CompanyName</td>
                    <td>
                        @c.Address<br />
                        @c.City<br />
                        @c.PostalCode<br />
                        @c.Country
                    </td>
                    <td>@c.Phone</td>
                    <td>
                        <a class="btn btn-info" href="updatecustomer/@c.CustomerId">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325" />
                            </svg>
                        </a>
                        <a class="btn btn-danger" href="deletecustomer/@c.CustomerId">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                            </svg>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string? Country { get; set; }

    private List<EntityModels.Customer>? customers;

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1000);
        if (string.IsNullOrEmpty(Country))
        {
            customers = await _service.GetCustomersAsync();
        }
        else
        {
            customers = await _service.GetCustomersAsync(Country);
        }
    }

    private void Action()
    {
        _nav.NavigateTo($"/customer/{Country}");
    }

}
